Backend (Django) Files
Category Definition and Structure
.idx/react-old-vuet/old-backend/core/utils/categories.py:
Defines the Categories enum with all category IDs and names
Contains CATEGORY_READABLE_NAMES mapping
Defines CategorySettings class that manages category properties
Controls which categories are premium
.idx/react-old-vuet/old-backend/core/models/categories/categories.py:
Defines ProfessionalCategory model for professional entities
Entity Models by Category
.idx/react-old-vuet/old-backend/core/models/entities/base.py:
Base Entity model with the category field
Common fields for all entities
Category-specific entity files:
pets.py: Pet entities (Pet, Vet, Walker, etc.)
social.py: Social entities (Event, Hobby, etc.)
education.py: Education entities (School, Teacher, etc.)
career.py: Career entities (Work, Colleague)
travel.py: Travel entities (Trip)
health.py: Health & Beauty entities (Doctor, Dentist, etc.)
home.py: Home entities (Home, Room, etc.)
garden.py: Garden entities (Plant, Tool)
food.py: Food entities (FoodPlan)
laundry.py: Laundry entities (DryCleaners, Item)
finance.py: Finance entities (Bank, CreditCard)
transport.py: Transport entities (Car, Boat, etc.)
anniversaries.py: Anniversary and Birthday entities
API Views and Serializers
.idx/react-old-vuet/old-backend/core/views/category_viewsets.py:
CategoriesViewset: Provides category information to frontend
ProfessionalCategoriesViewset: Handles professional categories
.idx/react-old-vuet/old-backend/core/serializers/categories.py:
CategoryConfigSerializer: Serializes category information for API responses
.idx/react-old-vuet/old-backend/core/views/entity_viewsets.py:
Views for accessing entities by category
Special views for SchoolTerms, SchoolYears, etc.
Frontend (React) Files
Category Display and Navigation
.idx/react-old-vuet/old-frontend/screens/Categories/CategoriesGrid.tsx:
Main grid display of all category groups (the 9 main category groups)
Defines the CATEGORY_GROUPS mapping that groups related categories
Handles navigation to specific category or subcategory screens
.idx/react-old-vuet/old-frontend/screens/Categories/CategoryListScreen.tsx:
Displays entities belonging to a single category
Handles filtering and sorting of category entities
.idx/react-old-vuet/old-frontend/screens/Categories/SubCategoryListScreen.tsx:
Handles display when a category group has multiple subcategories
User can select which subcategory to view
Entity Type Components
.idx/react-old-vuet/old-frontend/screens/EntityPages/:
Contains screens for viewing/editing specific entity types
Entity forms specific to each category
API Integration
.idx/react-old-vuet/old-frontend/reduxStore/services/api/categories.js:
API hooks for fetching categories: useGetAllCategoriesQuery
RTK Query implementation for categories
.idx/react-old-vuet/old-frontend/reduxStore/services/api/entities.js:
API hooks for fetching entities by category
CRUD operations for entities
Data Flow
Category Data Flow:
Backend: Categories are defined in categories.py enum
API: CategoriesViewset exposes categories via API
Frontend: useGetAllCategoriesQuery fetches the categories
Display: CategoriesGrid.tsx renders the category grid using fetched data
The CATEGORY_GROUPS in CategoriesGrid.tsx defines how categories are grouped in the UI
Entity Data Flow:
Backend: Entity models define which category they belong to by setting self.category in the save method
API: EntityViewSet exposes entities filtered by category
Frontend: API services fetch entities by category
Display: CategoryListScreen.tsx displays entities for a selected category
Navigation Flow:
User taps a category in CategoriesGrid
If it's a single category (like PETS), navigates to CategoryListScreen with the category ID
If it's a group (like EDUCATION_CAREER), navigates to SubCategoryListScreen with the category IDs
From category list, user can tap entities to view details or create new ones
Special Features:
SchoolTerms/Years: Special models with their own viewsets but linked to Education category
TimeBlocks: Has its own models and screens but affects task scheduling across categories
Lists: Generic feature that can be applied to any category
The key linkage between frontend and backend is the category ID system, where frontend components use these IDs to fetch and display the appropriate entities from the backend API, creating a consistent user experience across the application