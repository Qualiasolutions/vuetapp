Vuet System Architecture: How Tasks and Entities Connect
Core Components
1. Entities
Entities are the "things" users manage in their lives (cars, pets, homes, etc.). They:
Are organized by category (12 main categories)
Can have parent-child relationships (hierarchical structure)
Can be assigned to users (through EntityMembership)
Store specific data relevant to their type
2. Tasks
Tasks are actions that need to be done, which:
Can be fixed (specific time) or flexible (can be scheduled)
Can be one-time or recurring
Can be assigned to users (through TaskMembership)
Are related to one or more entities
Relationships Between Components
Entity-Task Connection
The central relationship is a many-to-many connection between tasks and entities: 
Task <----> Entity
In the model:
# In Task model:
entities = models.ManyToManyField(Entity, blank=True, related_name="tasks")
This means:
A task can be associated with multiple entities (e.g., "Buy food" task could be linked to both a Pet entity and a Home entity)
An entity can have multiple tasks associated with it (e.g., a Car entity might have "Change oil", "Renew insurance", etc.)

User-Entity-Task Relationship
User <----> Entity <----> Task

Users are connected to both entities and tasks through membership models:
# User connections to entities
members = models.ManyToManyField(User, through="EntityMembership", related_name="entities")

# User connections to tasks
members = models.ManyToManyField(User, through="TaskMembership", related_name="tasks")


This allows:
Users to share entities with other users
Users to assign tasks to other users
Tasks to be visible to users who are members of the associated entities
Task Scheduling System
Flexible Tasks
These are tasks with:
earliest_action_date: When the task can start being worked on
due_date: When the task must be completed by
duration: How long the task takes
The system uses a scheduling engine to optimally place these tasks on the calendar.
Fixed Tasks
These have specific times:
start_datetime/end_datetime: Exact start and end times
Or start_date/end_date: For all-day events
Recurrence
Tasks can recur through the Recurrence model:
class Recurrence(models.Model):
    task = models.OneToOneField(Task, related_name="recurrence", on_delete=models.CASCADE)
    recurrence = models.CharField(choices=RECURRENCE_CHOICES)
    interval_length = models.IntegerField(default=1)
    # ...
    This creates repeating instances of tasks (daily, weekly, monthly, etc.)
Overrides
RecurrentTaskOverwrite lets users modify specific occurrences of recurring tasks.
Task-Entity-Category Connection
The system uses entity categories to make smart decisions:
When scheduling flexible tasks, the scheduling engine considers:
Which category the task's entities belong to
Blocked days for that category (through BlockedCategory models)
Preferred days for that category (through PreferredDays)
Automated tasks can be created based on entity data:
Car service reminders based on service_due_date
Birthday tasks from Birthday entities
Holiday tasks from Holiday entities
Special Systems
Routines
Routines define regular time blocks in a user's week:
class Routine(models.Model):
    name = models.CharField(max_length=127)
    monday = models.BooleanField(default=False)
    # ... other days
    start_time = models.TimeField()
    end_time = models.TimeField()
    members = models.ManyToManyField(User, related_name="routines")
    Tasks can be associated with routines, ensuring they're scheduled during routine times.
TimeBlocks
Similar to routines but more specific:
class TimeBlock(models.Model):
    day = models.IntegerField(choices=DAY_CHOICES)
    start_time = models.TimeField()
    end_time = models.TimeField()
    members = models.ManyToManyField(User, related_name="timeblocks")
    Used to define when certain types of tasks can be scheduled.
School Terms
For education-related tasks:
School -> SchoolYear -> SchoolTerm/SchoolBreak
These impact task scheduling for education-related entities.
Workflow Example
User creates a Car entity in the Transport category
System suggests common tasks for cars (service, insurance renewal)
User creates these tasks, connected to the Car entity
Tasks are scheduled based on:
User's routine/time blocks
Preferred days for Transport category
Due dates specified
Tasks appear on calendar and task lists
Other family members can be added to the Car entity
Tasks can be assigned to specific family members
Completion of tasks is tracked through TaskCompletionForm
Frontend Implementation
In the React frontend:
CategoriesGrid.tsx shows category options
User navigates to a category like Transport
CategoryListScreen.tsx shows entities in that category
User selects an entity like a Car
Entity detail screen shows:
Entity details
Associated tasks
Option to add new tasks
Calendar view shows all tasks, color-coded by category
Task lists can be filtered by entity or category
This integrated system creates a comprehensive life management application where users can organize both their "things" (entities) and their "to-dos" (tasks) in a structured, intuitive way.