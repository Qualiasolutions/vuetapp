import 'package:equatable/equatable.dart';

class TaskSupabaseModel extends Equatable {
  final String id;
  final String title;
  final String? description;
  final DateTime? dueDate;
  final String? priority; // 'low', 'medium', 'high'
  final String? status; // 'pending', 'in_progress', 'completed', 'cancelled'
  final bool? isRecurring;
  final Map<String, dynamic>? recurrencePattern;
  final String? categoryId;
  final String? createdBy;
  final String? assignedTo;
  final String? parentTaskId;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final DateTime? completedAt;
  final bool isCompleted;

  const TaskSupabaseModel({
    required this.id,
    required this.title,
    this.isCompleted = false,
    this.description,
    this.dueDate,
    this.priority,
    this.status,
    this.isRecurring,
    this.recurrencePattern,
    this.categoryId,
    this.createdBy,
    this.assignedTo,
    this.parentTaskId,
    this.createdAt,
    this.updatedAt,
    this.completedAt,
  });

  TaskSupabaseModel copyWith({
    String? id,
    String? title,
    String? description,
    DateTime? dueDate,
    String? priority,
    String? status,
    bool? isRecurring,
    Map<String, dynamic>? recurrencePattern,
    String? categoryId,
    String? createdBy,
    String? assignedTo,
    String? parentTaskId,
    DateTime? createdAt,
    DateTime? updatedAt,
    DateTime? completedAt,
    bool? isCompleted,
  }) {
    return TaskSupabaseModel(
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      dueDate: dueDate ?? this.dueDate,
      priority: priority ?? this.priority,
      status: status ?? this.status,
      isRecurring: isRecurring ?? this.isRecurring,
      recurrencePattern: recurrencePattern ?? this.recurrencePattern,
      categoryId: categoryId ?? this.categoryId,
      createdBy: createdBy ?? this.createdBy,
      assignedTo: assignedTo ?? this.assignedTo,
      parentTaskId: parentTaskId ?? this.parentTaskId,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      completedAt: completedAt ?? this.completedAt,
      isCompleted: isCompleted ?? this.isCompleted,
    );
  }

  factory TaskSupabaseModel.fromMap(Map<String, dynamic> map) {
    return TaskSupabaseModel(
      id: map['id'] as String,
      title: map['title'] as String,
      description: map['description'] as String?,
      dueDate: map['due_date'] != null ? DateTime.tryParse(map['due_date'] as String) : null,
      priority: map['priority'] as String?,
      status: map['status'] as String?,
      isRecurring: map['is_recurring'] as bool?,
      recurrencePattern: map['recurrence_pattern'] != null 
          ? Map<String, dynamic>.from(map['recurrence_pattern'] as Map) 
          : null,
      categoryId: map['category_id'] as String?,
      createdBy: map['created_by'] as String?,
      assignedTo: map['assigned_to'] as String?,
      parentTaskId: map['parent_task_id'] as String?,
      createdAt: map['created_at'] != null ? DateTime.tryParse(map['created_at'] as String) : null,
      updatedAt: map['updated_at'] != null ? DateTime.tryParse(map['updated_at'] as String) : null,
      completedAt: map['completed_at'] != null ? DateTime.tryParse(map['completed_at'] as String) : null,
      isCompleted: map['is_completed'] as bool? ?? false,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'due_date': dueDate?.toIso8601String(),
      'priority': priority,
      'status': status,
      'is_recurring': isRecurring,
      'recurrence_pattern': recurrencePattern,
      'category_id': categoryId,
      'created_by': createdBy,
      'assigned_to': assignedTo,
      'parent_task_id': parentTaskId,
      // 'created_at' and 'updated_at' are typically handled by the database
      'completed_at': completedAt?.toIso8601String(),
      'is_completed': isCompleted,
    };
  }
  
  // For insert, we might not want to include id if it's auto-generated by db,
  // or created_at/updated_at. This map is more for updates or if id is client-generated.
  Map<String, dynamic> toInsertMap() {
    final map = toMap();
    // Supabase typically handles 'id' if it's a default uuid, and timestamps
    map.remove('id'); 
    // map.remove('created_at'); // Let DB handle
    // map.remove('updated_at'); // Let DB handle
    return map;
  }

  // For update, ensure 'id' is not part of the payload, it's used in .eq('id', id)
   Map<String, dynamic> toUpdateMap() {
    final map = toMap();
    map.remove('id');
    // map.remove('created_at'); // Usually not updated
    return map;
  }


  @override
  List<Object?> get props => [
        id,
        title,
        description,
        dueDate,
        priority,
        status,
        isRecurring,
        recurrencePattern,
        categoryId,
        createdBy,
        assignedTo,
        parentTaskId,
        createdAt,
        updatedAt,
        completedAt,
        isCompleted,
      ];
}
