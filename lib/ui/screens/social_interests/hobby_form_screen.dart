import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:vuet_app/models/social_interest_models.dart';
import 'package:vuet_app/providers/auth_providers.dart';
import 'package:vuet_app/providers/social_interest_providers.dart';
import 'package:vuet_app/ui/shared/widgets.dart'; // For VuetHeader, VuetTextField, VuetSaveButton, VuetValidators etc.

class HobbyFormScreen extends ConsumerStatefulWidget {
  final String? hobbyId;
  const HobbyFormScreen({super.key, this.hobbyId});

  @override
  ConsumerState<HobbyFormScreen> createState() => _HobbyFormScreenState();
}

class _HobbyFormScreenState extends ConsumerState<HobbyFormScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _descriptionController;
  late TextEditingController _frequencyController;
  DateTime? _lastEngagedDate;

  bool _isLoading = false;
  Hobby? _editingHobby;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController();
    _descriptionController = TextEditingController();
    _frequencyController = TextEditingController();

    if (widget.hobbyId != null) {
      _loadHobbyData();
    }
  }

  Future<void> _loadHobbyData() async {
    setState(() => _isLoading = true);
    try {
      _editingHobby = await ref.read(hobbyByIdProvider(widget.hobbyId!).future);
      if (_editingHobby != null) {
        _nameController.text = _editingHobby!.name;
        _descriptionController.text = _editingHobby!.description ?? '';
        _frequencyController.text = _editingHobby!.frequency ?? '';
        _lastEngagedDate = _editingHobby!.lastEngagedDate;
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error loading hobby: $e')),
      );
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    _frequencyController.dispose();
    super.dispose();
  }

  Future<void> _selectLastEngagedDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _lastEngagedDate ?? DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
    );
    if (picked != null && picked != _lastEngagedDate) {
      setState(() {
        _lastEngagedDate = picked;
      });
    }
  }

  Future<void> _saveHobby() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isLoading = true);
      final userId = ref.read(currentUserProvider)?.id;
      if (userId == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('User not authenticated.')),
        );
        setState(() => _isLoading = false);
        return;
      }

      try {
        final now = DateTime.now();
        if (_editingHobby == null) { // Create new
          final newHobby = Hobby(
            id: '', // Will be generated by Supabase or backend if not provided by client
            userId: userId,
            name: _nameController.text.trim(),
            description: _descriptionController.text.trim().isEmpty ? null : _descriptionController.text.trim(),
            frequency: _frequencyController.text.trim().isEmpty ? null : _frequencyController.text.trim(),
            lastEngagedDate: _lastEngagedDate,
            createdAt: now,
            updatedAt: now,
          );
          await ref.read(hobbyRepositoryProvider).createHobby(newHobby);
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Hobby created successfully!')),
          );
        } else { // Update existing
          final updatedHobby = _editingHobby!.copyWith(
            name: _nameController.text.trim(),
            description: _descriptionController.text.trim().isEmpty ? null : _descriptionController.text.trim(),
            frequency: _frequencyController.text.trim().isEmpty ? null : _frequencyController.text.trim(),
            lastEngagedDate: _lastEngagedDate,
            updatedAt: now,
          );
          await ref.read(hobbyRepositoryProvider).updateHobby(updatedHobby);
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Hobby updated successfully!')),
          );
        }
        ref.invalidate(userHobbiesProvider);
        Navigator.of(context).pop();
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error saving hobby: $e')),
        );
      } finally {
         if (mounted) {
          setState(() => _isLoading = false);
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: VuetHeader(widget.hobbyId == null ? 'Add Hobby' : 'Edit Hobby'),
      body: _isLoading && widget.hobbyId != null // Show loader only when editing and loading initial data
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: <Widget>[
                    VuetTextField(
                      'Hobby Name*',
                      controller: _nameController,
                      validator: VuetValidators.required,
                    ),
                    const SizedBox(height: 16),
                    VuetTextField(
                      'Description (optional)',
                      controller: _descriptionController,
                      validator: (value) => null, // Optional
                      type: TextInputType.multiline,
                      // minLines: 3, // If VuetTextField supports these
                      // maxLines: 5,
                    ),
                    const SizedBox(height: 16),
                    VuetTextField(
                      'Frequency (e.g., Daily, Weekly, Monthly)',
                      controller: _frequencyController,
                      validator: (value) => null, // Optional
                    ),
                    const SizedBox(height: 16),
                    ListTile(
                      title: Text(_lastEngagedDate == null
                          ? 'Last Engaged Date (optional)'
                          : 'Last Engaged: ${MaterialLocalizations.of(context).formatShortDate(_lastEngagedDate!)}'),
                      trailing: const Icon(Icons.calendar_today),
                      onTap: () => _selectLastEngagedDate(context),
                    ),
                    const SizedBox(height: 24),
                    _isLoading 
                        ? const Center(child: CircularProgressIndicator())
                        : VuetSaveButton(onPressed: _saveHobby),
                  ],
                ),
              ),
            ),
    );
  }
}
